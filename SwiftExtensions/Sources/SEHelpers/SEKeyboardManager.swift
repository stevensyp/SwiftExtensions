//
//  SEKeyboardManager.swift
//
//  Created by Steven Syp on 7/5/19.
//  Copyright © 2019 Steven Syp. All rights reserved.
//

import UIKit


final class SEKeyboardManager {

    /// Stores if the keyboard is currently active or not.
    var isActive: Bool = false

    /// The duration of the keyboard's animation.
    /// Default value (used if the notification parsing failed) is `0.25`.
    private(set) var animationDuration: Double = 0.25
    /// The curve of the keyboard's animation.
    /// Default value (used if the notification parsing failed) is `1`.
    private(set) var animationCurve: UInt = 1

    /// Keyboard's size (stored once a `willShow` notification is parsed).
    private(set) var size: CGRect?
    /// Keyboard's height (dynamically computed from `self.size`).
    var height: CGFloat {
        return size?.height ?? 0
    }

    /// Parses the notification generated by the keyboard's events
    /// - Parameter notification: Keyboard event notification
    func parseNotification(_ notification: Notification) {
        animationDuration = notification.userInfo?[UIResponder.keyboardAnimationDurationUserInfoKey] as! Double
        animationCurve = notification.userInfo?[UIResponder.keyboardAnimationCurveUserInfoKey] as! UInt
        if let keyboardFrame: NSValue = notification.userInfo?[UIResponder.keyboardFrameEndUserInfoKey] as? NSValue {
            size = UIView().convert(keyboardFrame.cgRectValue, from: nil)
        }
    }


    /// Adds an oberserver on a given keyboard event
    /// - Parameters:
    ///   - target: The target object—that is, the object whose action method is called
    ///   - action: A selector identifying the action method to be called
    ///   - event: Event for which the action method is called
    func addObserver(_ target: Any, action: Selector, for event: KeyboardEvent) {
        NotificationCenter.default.addObserver(
            target, selector: action,
            name: event.eventValue,
            object: nil
        )
    }

    /// Keyboard show/hide event wrapper
    enum KeyboardEvent {
        case willShow, willHide

        /// Returns the corresponding type of `NSNotification`.
        var eventValue: NSNotification.Name {
            switch self {
            case .willShow:
                return UIResponder.keyboardWillShowNotification
            case .willHide:
                return UIResponder.keyboardWillHideNotification
            }
        }
    }
}
